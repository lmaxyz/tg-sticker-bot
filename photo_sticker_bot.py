import logging
import os
import sys
import traceback

import dotenv
from rembg import new_session
from telegram import Update
from telegram import error as tg_err
from telegram.constants import StickerFormat
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

from error import NoEmojiSent
from sticker import create_new_sticker

dotenv.load_dotenv()


def load_env_or_exit(key: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –æ—à–∏–±–∫–æ–π.
    :param key: str
    :return: str
    """
    try:
        env_value = os.environ[key]
    except KeyError:
        print(f"[!] –ó–Ω–∞—á–µ–Ω–∏–µ `{key}` –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–∞–π–ª–µ `.env`.")
        sys.exit(1)
    else:
        return env_value


BOT_TOKEN = load_env_or_exit("BOT_TOKEN")
BOT_NAME = load_env_or_exit("BOT_NAME")
REMBG_AI_MODEL = load_env_or_exit("REMBG_AI_MODEL")

HELP_TEXT = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã

–≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤.
–û–Ω –≤—ã—Ä–µ–∑–∞–µ—Ç —Ñ–æ–Ω –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ —Ñ–æ—Ç–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:
1) –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
2) –í –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —Å—Ç–∏–∫–µ—Ä–æ–º (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –ø–æ–¥—Ä—è–¥).
3) –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*.

* –î–ª—è –≤–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å—Ç–∏–∫–µ—Ä—ã.
–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /delete_sticker_pack.
"""

STICKER_SET_NAME_TMPL = f"for_{{0}}_by_{BOT_NAME}"
DEFAULT_STICKER_SET_TITLE = f"Stickers from @{BOT_NAME}"


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(logging.FileHandler("sticker_bot.log", mode="a"))


async def help_message(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT)


async def add_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user

    if not context.bot_data.get("performance_mode", False):
        rembg_session = new_session(REMBG_AI_MODEL)
    else:
        rembg_session = context.bot_data['rembg_session']

    try:
        new_sticker = await create_new_sticker(update, rembg_session)
    except NoEmojiSent:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ –∫ —Å—Ç–∏–∫–µ—Ä—É.")
    except Exception:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        sticker_set_name = STICKER_SET_NAME_TMPL.format(user.username)
        try:
            await update.get_bot().add_sticker_to_set(user.id, sticker_set_name, sticker=new_sticker)
        except tg_err.BadRequest as err:
            if "Stickerset_invalid" in str(err):
                await _create_new_sticker_set(update, sticker_set_name, new_sticker)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.\n{traceback.format_exc()}")
                await update.message.reply_text(
                    "‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            logger.error(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.\n{traceback.format_exc()}")
            await update.message.reply_text("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚úÖ –°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.\n"
                                            f"https://t.me/addstickers/{sticker_set_name}")


async def delete_sticker_set(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    try:
        success = await update.get_bot().delete_sticker_set(STICKER_SET_NAME_TMPL.format(update.message.from_user.username))
    except Exception:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.\n{traceback.format_exc()}")
        success = False

    if success:
        await update.message.reply_text("‚úÖ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def get_user_sticker_set_link(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    sticker_set_name = STICKER_SET_NAME_TMPL.format(update.message.from_user.username)
    await update.message.reply_text(f"https://t.me/addstickers/{sticker_set_name}")


async def _create_new_sticker_set(update: Update, sticker_set_name, first_sticker):
    user = update.message.from_user
    try:
        await update.get_bot().create_new_sticker_set(user.id, sticker_set_name, DEFAULT_STICKER_SET_TITLE,
                                                      stickers=(first_sticker,), sticker_format=StickerFormat.STATIC)
    except tg_err.BadRequest:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.\n{traceback.format_exc()}")
    else:
        await update.message.reply_text(f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å–µ–±–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                                        f"https://t.me/addstickers/{sticker_set_name}")


async def _init_persistent_rembg_session(app: Application):
    app.bot_data['rembg_session'] = new_session(REMBG_AI_MODEL)
    app.bot_data['performance_mode'] = True


def start_bot():
    bot = Application.builder().token(BOT_TOKEN).build()

    print(sys.argv)
    if len(sys.argv) == 2 and sys.argv[1] == "--performance-mode":
        bot.post_init = _init_persistent_rembg_session

    bot.add_handler(CommandHandler("help", help_message))
    bot.add_handler(CommandHandler("start", help_message))
    bot.add_handler(CommandHandler("sticker_pack_link", get_user_sticker_set_link))
    bot.add_handler(CommandHandler("delete_sticker_pack", delete_sticker_set))
    bot.add_handler(MessageHandler(filters.PHOTO, add_sticker))

    bot.run_polling()


if __name__ == "__main__":
    start_bot()
